#!/usr/bin/env python3

import pystemd.systemd1
import socket
import consul
import sys
import time
import random
import json
import yaml
import traceback

sys.path.append("/opt/transcoder2/scripts")
import mqtt

cons = consul.Consul()

def transcodings_get_running():
    manager = pystemd.systemd1.Manager()
    manager.load()
    transcodings = []
    for service in manager.Manager.ListUnitsByPatterns(["active"], ["transcode@*.service"]):
        transcodings.append(service[0].decode()[10:-8])
    return transcodings

def transcodings_start(stream):
    streaminfo = json.loads(cons.kv.get("stream/%s" % stream)[1]["Value"])

    transcoder_config = "stream_key=%s\n" % stream
    transcoder_config += "format=%s\n" % streaminfo["format"]
    transcoder_config += "output=direct\n"
    transcoder_config += "type=h264-only\n"
    transcoder_config += "transcoding_source=%s\n" % streaminfo["source"]
    transcoder_config += "transcoding_sink=%s\n" % config["sink"]

    try:
        passthrough_mode = cons.kv.get("stream/%s/passthrough" % stream)[1]["Value"].decode()
    except:
        passthrough_mode = "no"
    transcoder_config += "passthrough=%s\n" % passthrough_mode

    try:
        restream_target = cons.kv.get("stream/%s/restream" % stream)[1]["Value"].decode()
    except:
        restream_target = "none"
    transcoder_config += "restream=%s\n" % restream_target

    try:
        framerate = cons.kv.get("stream/%s/framerate" % stream)[1]["Value"].decode()
    except:
        framerate = 25
    transcoder_config += "framerate=%s\n" % framerate

    transcoder_config_path = config["configPath"] + "/" + stream
    open(transcoder_config_path, "w").write(transcoder_config)

    target = pystemd.systemd1.Unit("transcode@%s.target" % stream)
    target.load()
    target.Unit.Start(b'replace')

def transcodings_stop(stream):
    target = pystemd.systemd1.Unit("transcode@%s.target" % stream)
    target.load()
    target.Unit.Stop(b'replace')

# look for stream/whatever entries in consul, read transcoder variable if available
def get_all_streams():
    keys = cons.kv.get("stream", keys=True)[1]
    if not keys:
        return []

    streamkeys = list([key.split("/")[1] for key in keys if len(key.split('/')) == 2])
    streams = dict(zip(streamkeys, [None]*len(streamkeys)))

    for key in streamkeys:
        if ('stream/%s/transcoder' % key) in keys:
            try:
                streams[key] = cons.kv.get("stream/%s/transcoder" % key)[1]["Value"].decode().split(".")[0]
            except:
                pass

    return streams

def log(msg):
    print(msg)
    try:
        with mqtt.Client(True) as client:
            client.info(msg)
    except:
        pass

def fix_services_state():
    running_transcodings = transcodings_get_running()
    all_streams = get_all_streams()

    for stream, transcoder in all_streams.items():
        # start transcodings that should be running
        if transcoder == config["hostname"] and stream not in running_transcodings:
            log("Transcoding %s should be running but is not, starting target" % stream)
            transcodings_start(stream)
        # stop transcodings that should be running on a different host
        elif transcoder != config["hostname"] and stream in running_transcodings:
            log("Transcoding %s is running but should not be, stopping target" % stream)
            transcodings_stop(stream)

    for stream in running_transcodings:
        if stream not in all_streams:
            log("Stream %s is no longer available, stopping transcoding" % stream)
            transcodings_stop(stream)
            try:
                cons.kv.delete("stream/%s/transcoder" % stream)
            except:
                pass

def mainloop():
    global config
    config = yaml.safe_load(open("/etc/stream-api/config.yml"))["transcode"]

    if "hostname" not in config:
        config["hostname"] = socket.gethostname().split(".")[0]

    # check what streams this system should handle
    my_streams = []
    for stream, transcoder in get_all_streams().items():
        if transcoder == config["hostname"]:
            my_streams.append(stream)

    for stream in my_streams:
        if cons.kv.get("stream/%s/restart" % stream)[1]:
            transcodings_stop(stream)
            transcodings_start(stream)
            cons.kv.delete("stream/%s/restart" % stream)

    # fix over-capacity (this should not happen during normal operation)
    if len(my_streams) > config["capacity"]:
        for stream in my_streams[config["capacity"]:]:
            log("Transcoder is over capacity, stopping transcoding for stream %s" % stream)
            transcodings_stop(stream)
            try:
                cons.kv.delete("stream/%s/transcoder" % stream)
            except:
                pass
            my_streams.remove(stream)

    # claim streams if not already at capacity
    if len(my_streams) < config["capacity"]:
        for stream, transcoder in get_all_streams().items():
            if transcoder: continue

            # wait a random delay (500ms to 5.5s) and check for transcoder again
            nextloop = False
            for i in range(5):
                time.sleep(len(my_streams)) # extremely professional load balancing hack
                time.sleep((100+random.randrange(1000))/1000)
                if cons.kv.get("stream/%s/transcoder" % stream)[1]:
                    nextloop = True
                    break
            if nextloop:
                continue

            log("Found unclaimed stream %s, trying to claim..." % stream)
            cons.kv.put("stream/%s/transcoder" % stream, config["hostname"].encode())

            # wait a random delay (100ms to 2.1s) and check if no other transcoder claimed the stream
            time.sleep((100+random.randrange(2000))/1000)
            # check if another transcoder tried to claim this..
            if cons.kv.get("stream/%s/transcoder" % stream)[1]["Value"].decode() != config["hostname"]:
                print("Another transcoder seems to have claimed %s" % stream)
                continue

            log("I won %s!" % stream)
            my_streams.append(stream)
            transcodings_start(stream)

            # give some delay before claiming the next stream
            time.sleep((100+random.randrange(2000))/1000)

            if len(my_streams) >= config["capacity"]:
                break

    transcoder_info = {}
    transcoder_info["time"] = time.time()
    transcoder_info["streams"] = len(my_streams)
    transcoder_info["capacity"] = config["capacity"]
    cons.kv.put("transcoders/%s" % config["hostname"], json.dumps(transcoder_info).encode())

    fix_services_state()

def main():
    while True:
        try:
            mainloop()
        except:
            traceback.print_exc()
        time.sleep(1)

if __name__ == '__main__':
    main()

